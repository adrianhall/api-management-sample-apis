"""
The `UUID` scalar represents a globally-unique ID.
"""
scalar UUID

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime

type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!

  """
  Lookup a TodoItem by its ID.
  """
  todoItemById(id: ID!): TodoItem

  """
  Lookup a TodoList by its ID.
  """
  todoListById(id: ID!): TodoList

  """
  Lookup the list of TodoList entities.
  """
  todoLists(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: TodoListFilterInput
    order: [TodoListSortInput!]
  ): TodoListsConnection
}

type Mutation {
  """
  Delete a TodoItem
  """
  deleteTodoItem(input: DeleteTodoItemInput!): DeleteTodoItemPayload!
  
  """
  Delete a TodoList
  """
  deleteTodoList(input: DeleteTodoListInput!): DeleteTodoListPayload!

  """
  Save a TodoItem (creating if it doesn't exist)
  """
  saveTodoItem(input: SaveTodoItemInput!): SaveTodoItemPayload!

  """
  Save a TodoList (creating if it doesn't exist)
  """
  saveTodoList(input: SaveTodoListInput!): SaveTodoListPayload!
}

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

input TodoListFilterInput {
  and: [TodoListFilterInput!]
  or: [TodoListFilterInput!]
  items: ListFilterInputTypeOfTodoItemFilterInput
  id: UuidOperationFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  updatedDate: DateTimeOperationFilterInput
}

input TodoListSortInput {
  id: SortEnumType
  name: SortEnumType
  description: SortEnumType
  createdDate: SortEnumType
  updatedDate: SortEnumType
}

"""
A connection to a list of items.
"""
type TodoListsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [TodoListsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [TodoList!]
}

"""
Error that is produced by the saveTodoItem mutation if the provided / linked list does not exist.
The message will contain the ID of the list that could not be found.
"""
type ListDoesNotExistError implements Error {
  message: String!
}

input ListFilterInputTypeOfTodoItemFilterInput {
  all: TodoItemFilterInput
  none: TodoItemFilterInput
  some: TodoItemFilterInput
  any: Boolean
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

enum SortEnumType {
  ASC
  DESC
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type TodoList implements Node {
  items: [TodoItem!]
  id: ID!
  name: String!
  description: String
  createdDate: DateTime!
  updatedDate: DateTime!
}

"""
An edge in a connection.
"""
type TodoListsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TodoList!
}

interface Error {
  message: String!
}

input TodoItemFilterInput {
  and: [TodoItemFilterInput!]
  or: [TodoItemFilterInput!]
  list: TodoListFilterInput
  listId: UuidOperationFilterInput
  state: TodoItemStateOperationFilterInput
  dueDate: DateTimeOperationFilterInput
  completedDate: DateTimeOperationFilterInput
  id: UuidOperationFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  updatedDate: DateTimeOperationFilterInput
}



input TodoItemStateOperationFilterInput {
  eq: TodoItemState
  neq: TodoItemState
  in: [TodoItemState!]
  nin: [TodoItemState!]
}

enum TodoItemState {
  TODO
  IN_PROGRESS
  DONE
}

type TodoItem implements Node {
  list: TodoList
  listId: UUID!
  state: TodoItemState!
  dueDate: DateTime
  completedDate: DateTime
  id: ID!
  name: String!
  description: String
  createdDate: DateTime!
  updatedDate: DateTime!
}

input SaveTodoItemInput {
  id: ID
  listId: UUID!
  name: String!
  state: TodoItemState!
  description: String
  dueDate: DateTime
  completedDate: DateTime
}

input SaveTodoListInput {
  id: ID
  name: String!
  description: String
}

input DeleteTodoItemInput {
  id: ID!
}

type DeleteTodoItemPayload {
  success: Boolean
}

input DeleteTodoListInput {
  id: ID!
}

type DeleteTodoListPayload {
  success: Boolean
}

union SaveTodoItemError = ListDoesNotExistError

type SaveTodoItemPayload {
  todoItem: TodoItem
  errors: [SaveTodoItemError!]
}

type SaveTodoListPayload {
  todoList: TodoList
}
